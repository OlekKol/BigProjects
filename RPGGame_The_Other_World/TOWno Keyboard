import keyboard
import os
import math
import time
import moving_between_files
import choice
# from jufen import Jufen
# J = Jufen
F = moving_between_files

class Move():
    def __init__(self) -> None:
        pass
    def map_whole(self):
        
        
        def gen_map(mapa, dim_x, dim_y):    
            for y in range(dim_y):
                line = []
                for x in range(dim_x):
                    line.append('0')
                mapa.append (line)
                
        def gen_square(mapa, x1, y1, x2, y2, kind):
            # w --> woods
            # m --> mountains
            n = 0
            
            if kind == "f":
                n += 1
            elif kind == "m":
                n += 2
            elif kind == 'w':
                n += 3
            elif kind == 'b':
                n += 4
            elif kind == 'r':
                n += 5
            elif kind == 's':
                n += 6
                
            for y in range(y1, y2 + 1):
                for x in range(x1, x2 + 1):
                    mapa[y][x] = str(n)
                    
        def gen_diamond(mapa, x, y, r, kind):
            n = 0
            if kind == "f":
                n += 1
            elif kind == "m":
                n += 2
            elif kind == 'w':
                n += 3    
            
            c = 0
            ungli = 0
            remainder = 0
            for y_ in range ((y - r),(y + r + 1)):
                c = remainder
                for x_ in range ((x - c),(x + c + 1)):
                
                    mapa[y_][x_] = str(n)
                
                    c += 1
                if remainder < r and ungli <= 0:
                    remainder += 1
                    
                else:
                    ungli += 1
                    remainder -= 1
                    
        def print_map(mapa):
            for w in range(len(mapa)):
                line = ''
                for k in range(len(mapa[w])):
                    line += mapa[w][k]
                print(line)
        
        def gen_special(mapa, x, y, kind):
            n = 0
            if kind == '0':
                n == '0'
            if kind == "f":
                n += 1
            elif kind == "m":
                n += 2
            elif kind == 'w':
                n += 3
            elif kind == 'b':
                n += 4
            elif kind == 'r':
                n += 5
            elif kind == 's':
                n += 6
                
            mapa[y][x] = str(n)
        
        def gen_special2(mapa, x, y, kind:str):
            mapa[y][x] = str(kind)
            
        def gen_castle(mapa, x, y, name):
            for y_ in range(y - 1, y + 2):
                for x_ in range(x - 1, x + 2): 
                    mapa[y_][x_] = str('C')
                    if y_ == y - 1 and x_ == x:
                        mapa[y_][x_] = str('0')
                    elif y_ == y + 1 and x_ == x:
                        mapa[y_][x_] = str(name)

        def gen_dungeon(mapa, x, y, name):
            # x y __________________
            # |NAME                 |
            # |                     |
            # |                     |
            # |                     |
            # |                     |
            # -----------------------
        
            for y_ in range(y, y + 6):
                for x_ in range(x, x + 8):
                        mapa[y_][x_] = str('C')
                        if y_ == y + 2 and x_ == x + 3:
                            mapa[y_][x_] = str('E' + name[0])
                        elif y_ == y + 2 and x_ == x + 4:
                            mapa[y_][x_] = str('E' + name[0])
                        elif y_ >= y + 3 and x_ >= x + 2 and x_ <= x + 5:
                            mapa[y_][x_] = str('E' + name[0])
                        elif y_ == y and x_ == x:
                            mapa[y_][x_] = str(name[0])
        

        def gen_moutains(mapa, x1 ,y1 ,x2, kind, up_or_down):
            n = 0
            if kind == "f":
                n += 1
            elif kind == "m":
                n += 2
            elif kind == 'w':
                n += 3
                
            if up_or_down == 'u':
                i = 0
                ix = 0
                while i >= (-x2 + x1):
                    if i != 0 and (i + 1)%3 == 0 or i==1:
                        for y in range(y1 + i -6 - 1 ,y1 + i ):
                            for x in range(x1 + ix, x1 + ix + 1):
                                mapa[y][x] = str(n)
                    else:
                        for y in range(y1 + i - 4 - 1,y1 + i):
                            for x in range(x1 + ix, x1 + ix + 1):
                                mapa[y][x] = str(n)
                    i -= 1
                    ix += 1
                
            else:

                i = 0
                
                while i <= (x2 - x1):
                    if i != 0 and ((i*-1) +1 )%3 == 0 or i==1:
                        for y in range(y1 + i - 2, y1 + i + 6 - 1):
                            for x in range(x1 + i, x1 + i + 1):
                                mapa[y][x] = str(n)
                    
                    else:
                        for y in range(y1 + i, y1 + i + 4 + 1):
                            for x in range(x1 + i, x1 + i + 1):
                                mapa[y][x] = str(n)
                    i += 1
        
        def gen_triangle_r(mapa, x1, y1, x2, y2, kind, stair_or_roof):
            # ------x2 y2
            # |    /|
            # |   / |
            # |  /  |
            # | /   |
            #x1 y1 ---
            n = 0
            if kind == "f":
                n += 1
            elif kind == "m":
                n += 2
            elif kind == 'w':
                n += 3
            i = 0
            l = x2 - x1
            if stair_or_roof == 's':
                for y in range (y2, y1 + 1 ):
                    i = 0
                    for x in range (x1, x2 + 1):
                        if i >= l:
                            mapa[y][x] = str(n)
                        i += 1
                    l -= 1
            else:
                l = 0
                for y in range (y2, y1 + 1 ):
                    i = x2 - x1
                    for x in range (x1, x2 + 1):
                        if i >= l:
                            mapa[y][x] = str(n)
                        i -= 1
                    l += 1
        def gen_triangle_l(mapa, x1, y1, x2, y2, kind, stair_or_roof):
            n = 0
            if kind == "f":
                n += 1
            elif kind == "m":
                n += 2
            elif kind == 'w':
                n += 3
            
            i = 0
            l = 0
            
            if stair_or_roof == 's':
                l = 0
                for y in range (y1, y2 + 1 ):
                    i = 0
                    for x in range (x1, x2 + 1):
                        if i <= l:
                            mapa[y][x] = str(n)
                        i += 1
                    l += 1
                
            else:
                for y in range (y1, y2 + 1 ):
                    i = 0
                    for x in range (x1, x2 + 1):
                        if i >= l:
                            mapa[y][x] = str(n)
                        i += 1
                    l += 1
            
        def specials(map, x, y):
            r = [0]
            being_checked = ['J', 'K', 'S']
            for i in range (0,len(being_checked)):
                if map[y][x] == being_checked[i]:
                    r = being_checked[i]
                    return r
            being_checked = ['EV', 'EL', 'EH']
            for i in range (0,len(being_checked)):
                if map[y][x] == being_checked[i]:
                    r = being_checked[i]
                    return r
            return r
            
        def kingdom_uncoder(u):
            print(u)
            if u == 'J' or u == 'j':
                return mapJ
            if u == 'K' or u == 'k':
                return mapK
            if u == 'S' or u == 's':
                return mapS
        def dungeon_uncoder(u):
            if u == 'H' or u == 'h':
                return mapH
            if u == 'L' or u == 'l':
                return mapL
            if u == 'V' or u == 'v':
                return mapV
        def move_speed_next_move_checker(mapac, x, y, if_in_dungeon, rd):
            
            
            if mapac == mapa:
                if mapac[y][x] == '1':
                    return 2
                elif mapac[y][x]  == '3':
                    return 3
                elif mapac[y][x]  == '2':
                    return 4
                else:
                    return 1
            elif mapac == mapK or mapac == mapJ or mapac == mapS:
                if mapac[y][x]  == '5':
                    return 1
                elif mapac[y][x]  == 'tL':
                    return 9
                elif mapac[y][x][0]  == 'W' or mapac[y][x][0]  == 'M' or mapac[y][x][0]  == 'F' or mapac[y][x][0]  == 'T':
                    return 2
                else:
                    return 0
            elif if_in_dungeon == 1:
                
                if mapac[y][x]  == '8':
                    return 1
                elif mapac[y][x]  == 'tL':
                    return 9
                elif mapac[y][x][0] == 'I' or mapac[y][x][0] == 'V' or mapac[y][x][0] == 'X':
                    pims = mob_detector(mapac,x,y,rd - 1, '9')
                    if len(pims[0]) == 0:
                        return 8
                    else: return 0
                else: return 0
                
        def which_shop_enter_checker(mapac, x, y):
            i = 1
            if mapac[y][x][0]  == 'W':
                while i < 8:
                    if str(mapac[y][x][1]) == str(i):
                        return str (mapac[y][x][0]) + str(mapac[y][x][1])
                    i += 1
            elif mapac[y][x][0]  == 'M':
                while i < 8:
                    if str(mapac[y][x][1]) == str(i):
                        return str (mapac[y][x][0]) + str(mapac[y][x][1])
                    i += 1
            elif mapac[y][x][0]  == 'F':
                while i < 8:
                    if str(mapac[y][x][1]) == str(i):
                        return str (mapac[y][x][0]) + str(mapac[y][x][1])
                    i += 1
            elif mapac[y][x][0]  == 'T':
                while i < 8:
                    if str(mapac[y][x][1]) == str(i):
                        return str(mapac[y][x][0]) + str(mapac[y][x][1])
                    i += 1
                    
                    
                    
        def are_you_sure_about_the_purchase():
        
            Y_N = ['No', 'Yes']
            answer = choice.WybierzZListy(Y_N, 'Do you whant to buy this item? ')
            print (answer)
            return answer
                    
        def shop(which,p_eq, pm):
            def shop_display(display, price, players_money, kind):
                
                z = 0
                exit_1_buy_2 = 0
                it_is = 0
                while exit_1_buy_2 == 0:
                    os.system('clear')
                    once = 0
                    for i in range (0,len(display)):
                        if price == '1' or it_is == 1:
                            price = display[i][2]
                            it_is = 1
                            
                        if once == 0 and kind == 'F':
                            price_to_show = display[z][2]
                            print('')
                            print(f'money - {players_money} (of yours)')
                            print('')
                            print(f'money - {players_money - price_to_show} (of yours --> after the purchase !)')
                        elif once == 0:
                            print('')
                            print(f'money - {players_money} (of yours)')
                            print('')
                            print(f'money - {players_money - price} (of yours --> after the purchase !)')
                        print('')
                        if z == i:
                            print(f'-> {display[i], price}')
                        else:
                            print(f'   {display[i], price}')
                        if i == (len(display)):
                            print('')
                        once = 1
                    print('')
                    print('Enter - to buy')
                    print('')
                    print('x - to Leave')
                    print('')
                    print_(p_eq, 's', 's', 'E' , 0, '')
                    keyboard.read_key()
                    if keyboard.is_pressed('Up'):
                        if z > 0 :
                            z -= 1
                    elif keyboard.is_pressed('Down'):
                        if z < len(display) - 1:
                            z += 1
                    elif keyboard.is_pressed('x'):
                        exit_1_buy_2 += 1
                    elif keyboard.is_pressed('Enter'):
                        exit_1_buy_2 += 2
                        
                after_the_buying = ['nothing','nothing', players_money]
                
                
                
                if exit_1_buy_2 == 2:

                    if players_money >= price:
                        aysatp = are_you_sure_about_the_purchase()
                        if aysatp == 1:
                            players_money -= price
                            after_the_buying = [kind,[display[z][0], display[z][1]],players_money]
                            easier = [after_the_buying]
                            return easier
                return after_the_buying
            
            def Weapon_shop(which,players_money):
                lvl = int(which[1])
            
                lvlr = 'I'
                if lvl == 1:
                    lvlr ='I'
                if lvl == 2:
                    lvlr ='II'
                if lvl == 3:
                    lvlr ='III'
                if lvl == 4:
                    lvlr ='IV'
                if lvl == 5:
                    lvlr ='V'
                if lvl == 6:
                    lvlr ='VI'
                if lvl == 7:
                    lvlr ='VII'

                    
            #(I --> VII)Level  Name     Damage    RdSPD       Price
                # Sword = [lvlr,'Sword',{lvl*25}, {1/lvl}, {(lvl ** 2) * 10}]
                # Spear = [lvlr,'Spear',{lvl*100},{4/lvl}, {(lvl ** 2) * 10}]
                # Bow =   [lvlr,'Bow',  {lvl*50}, {2/lvl}, {(lvl ** 2) * 10}]
                # price = Sword[len(Sword) - 1]
                
                ################
                Sword = [lvlr,'Sword']
                Spear = [lvlr,'Spear']
                Bow =   [lvlr,'Bow']
                
                price = (lvl ** 2) * 10
                
                display = [Sword,Spear,Bow]
                kind = 'W'
                return shop_display(display, price, players_money, kind)
                
                
                    
                    
                
            
                
                    
            def Magic_shop(which, players_money):
                kind = 'M'
                
                lvl = int(which[1])
                
                # lvlr = 'I'
                # if lvl == 1:
                #     lvlr ='I'
                # #(I --> VII)Level  Name     Damage    Mana_needed       Price
                #     Water = [lvlr,'Teardrop',{lvl*25}, {lvl} * 100, {(lvl ** 2) * 10}]
                #     Fire = [lvlr,'Snap_flame',{lvl*25}, {lvl} * 100, {(lvl ** 2) * 10}]
                #     Earth = [lvlr,'Sand_throw',{lvl*25}, {lvl} * 100, {(lvl ** 2) * 10}]
                #     Air = [lvlr,'Air_blow',{lvl*25}, {lvl} * 100, {(lvl ** 2) * 10}]
                # if lvl == 2:
                #     lvlr ='II'
                # if lvl == 3:
                #     lvlr ='III'
                #     Water = [lvlr,'Splash',{lvl*25}, {lvl} * 100, {(lvl ** 2) * 10}]
                #     Fire = [lvlr,'Fire_trow',{lvl*25}, {lvl} * 100, {(lvl ** 2) * 10}]
                #     Earth = [lvlr,'Quicksand',{lvl*25}, {lvl} * 100, {(lvl ** 2) * 10}]
                #     Air = [lvlr,'Wind_blow',{lvl*25}, {lvl} * 100, {(lvl ** 2) * 10}]
                # if lvl == 4:
                #     lvlr ='IV'
                #     Water = [lvlr,'WaterBall',{lvl*25}, {lvl} * 100, {(lvl ** 2) * 10}]
                #     Fire = [lvlr,'FireBall',{lvl*25}, {lvl} * 100, {(lvl ** 2) * 10}]
                #     Earth = [lvlr,'EarthBall',{lvl*25}, {lvl} * 100, {(lvl ** 2) * 10}]
                #     Air = [lvlr,'AirBall',{lvl*25}, {lvl} * 100, {(lvl ** 2) * 10}]
                # if lvl == 5:
                #     lvlr ='V'
                #     Water = [lvlr,'Wave',{lvl*25}, {lvl} * 100, {(lvl ** 2) * 10}]
                #     Fire = [lvlr,'Dragon_breath',{lvl*25}, {lvl} * 100, {(lvl ** 2) * 10}]
                #     Earth = [lvlr,'Earth_prison',{lvl*25}, {lvl} * 100, {(lvl ** 2) * 10}]
                #     Air = [lvlr,'Air_shoes',{lvl*25}, {lvl} * 100, {(lvl ** 2) * 10}]
                # if lvl == 6:
                #     lvlr ='VI'
                # if lvl == 7:
                #     lvlr ='VII'
                #     Water = [lvlr,'Tsunami',{lvl*25}, {lvl} * 100, {(lvl ** 2) * 10}]
                #     Fire = [lvlr,'Fire_Beam',{lvl*25}, {lvl} * 100, {(lvl ** 2) * 10}]
                #     Earth = [lvlr,'Earthquake',{lvl*25}, {lvl} * 100, {(lvl ** 2) * 10}]
                #     Air = [lvlr,'Tornado',{lvl*25}, {lvl} * 100, {(lvl ** 2) * 10}]
                lvlr = 'I'
                if lvl == 1:
                    lvlr ='I'
                if lvl == 2:
                    lvlr ='II'
                if lvl == 3:
                    lvlr ='III'
                if lvl == 4:
                    lvlr ='IV'
                if lvl == 5:
                    lvlr ='V'
                if lvl == 6:
                    lvlr ='VI'
                if lvl == 7:
                    lvlr ='VII'
                
                
                Wand = [lvlr, 'Wand']
                Potion_bottle = [lvlr, 'Potion_bottle']
                Spell_book = [lvlr, 'Spell']
                
                price = lvl**3 * 10
                display = [Wand, Potion_bottle, Spell_book]
                
                return shop_display(display, price, players_money, kind)
                
                
                
            
            
            def Food_shop(which, players_money):
                kind = 'F'
                
                lvl = int(which[1])
                if lvl == 1:
                    d = 1
                elif lvl == 3:
                    d = 3
                elif lvl == 5:
                    d = 5
                    
                Bread = ['I', 'Bread', lvl]
                Water = ['I', 'Water', 1/2*lvl]
                
                Chicken = ['III', 'Chicken',2*lvl]
                Sugar_water = ['III', 'Sugar_water',lvl]
                
                Beef = ['V', 'Beef', 3*lvl]
                Whisky = ['V', 'Whisky', 4*lvl]
                
                
                if d == 1:
                    display = [Bread, Water]
                elif d == 3:
                    display = [Bread, Water, Chicken, Sugar_water]
                elif d == 5:
                    display = [Bread, Water, Chicken, Sugar_water, Beef, Whisky]
                
                price = '1'
                
                
                return shop_display(display, price, players_money, kind)
            
            def Travel_shop(which, players_money):
                
                lvl = int(which[1])
            
      
